// File generated from our OpenAPI spec by Stainless.

package com.legalesign_sdk.api.models.document

import com.legalesign_sdk.api.core.JsonValue
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class DocumentCreateParamsTest {

    @Test
    fun create() {
        DocumentCreateParams.builder()
            .group("https://example.com")
            .name("x")
            .addSigner(
                DocumentCreateParams.Signer.builder()
                    .email("dev@stainless.com")
                    .firstname("firstname")
                    .lastname("lastname")
                    .addAttachment("/api/v1/attachment/IK-GV--w1tvt/")
                    .behalfof("behalfof")
                    .decideLater(true)
                    .expires(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .message("message")
                    .order(0)
                    .addReviewer(
                        DocumentCreateParams.Signer.Reviewer.builder()
                            .email("dev@stainless.com")
                            .firstname("firstname")
                            .includeLink(true)
                            .lastname("lastname")
                            .build()
                    )
                    .role(DocumentCreateParams.Signer.Role.WITNESS)
                    .sms("sms")
                    .subject("subject")
                    .timezone("timezone")
                    .build()
            )
            .appendPdf(true)
            .autoArchive(true)
            .ccEmails("cc_emails")
            .convertSenderToSigner(true)
            .doEmail(true)
            .footer("footer")
            .footerHeight(0L)
            .header("header")
            .headerHeight(0L)
            .pdfPassword("pdf_password")
            .pdfPasswordType(DocumentCreateParams.PdfPasswordType._1)
            .pdftext(
                DocumentCreateParams.Pdftext.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
            .redirect("https://")
            .reminders("")
            .returnSignerLinks(true)
            .signatureType(0L)
            .signersInOrder(true)
            .signertext(
                DocumentCreateParams.Signertext.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
            .strictFields(true)
            .tag("tag")
            .tag1("tag1")
            .tag2("tag2")
            .template("https://example.com")
            .templatepdf("https://example.com")
            .text("text")
            .user("https://example.com")
            .build()
    }

    @Test
    fun body() {
        val params =
            DocumentCreateParams.builder()
                .group("https://example.com")
                .name("x")
                .addSigner(
                    DocumentCreateParams.Signer.builder()
                        .email("dev@stainless.com")
                        .firstname("firstname")
                        .lastname("lastname")
                        .addAttachment("/api/v1/attachment/IK-GV--w1tvt/")
                        .behalfof("behalfof")
                        .decideLater(true)
                        .expires(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .message("message")
                        .order(0)
                        .addReviewer(
                            DocumentCreateParams.Signer.Reviewer.builder()
                                .email("dev@stainless.com")
                                .firstname("firstname")
                                .includeLink(true)
                                .lastname("lastname")
                                .build()
                        )
                        .role(DocumentCreateParams.Signer.Role.WITNESS)
                        .sms("sms")
                        .subject("subject")
                        .timezone("timezone")
                        .build()
                )
                .appendPdf(true)
                .autoArchive(true)
                .ccEmails("cc_emails")
                .convertSenderToSigner(true)
                .doEmail(true)
                .footer("footer")
                .footerHeight(0L)
                .header("header")
                .headerHeight(0L)
                .pdfPassword("pdf_password")
                .pdfPasswordType(DocumentCreateParams.PdfPasswordType._1)
                .pdftext(
                    DocumentCreateParams.Pdftext.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .redirect("https://")
                .reminders("")
                .returnSignerLinks(true)
                .signatureType(0L)
                .signersInOrder(true)
                .signertext(
                    DocumentCreateParams.Signertext.builder()
                        .putAdditionalProperty("foo", JsonValue.from("string"))
                        .build()
                )
                .strictFields(true)
                .tag("tag")
                .tag1("tag1")
                .tag2("tag2")
                .template("https://example.com")
                .templatepdf("https://example.com")
                .text("text")
                .user("https://example.com")
                .build()

        val body = params._body()

        assertThat(body.group()).isEqualTo("https://example.com")
        assertThat(body.name()).isEqualTo("x")
        assertThat(body.signers())
            .containsExactly(
                DocumentCreateParams.Signer.builder()
                    .email("dev@stainless.com")
                    .firstname("firstname")
                    .lastname("lastname")
                    .addAttachment("/api/v1/attachment/IK-GV--w1tvt/")
                    .behalfof("behalfof")
                    .decideLater(true)
                    .expires(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .message("message")
                    .order(0)
                    .addReviewer(
                        DocumentCreateParams.Signer.Reviewer.builder()
                            .email("dev@stainless.com")
                            .firstname("firstname")
                            .includeLink(true)
                            .lastname("lastname")
                            .build()
                    )
                    .role(DocumentCreateParams.Signer.Role.WITNESS)
                    .sms("sms")
                    .subject("subject")
                    .timezone("timezone")
                    .build()
            )
        assertThat(body.appendPdf()).contains(true)
        assertThat(body.autoArchive()).contains(true)
        assertThat(body.ccEmails()).contains("cc_emails")
        assertThat(body.convertSenderToSigner()).contains(true)
        assertThat(body.doEmail()).contains(true)
        assertThat(body.footer()).contains("footer")
        assertThat(body.footerHeight()).contains(0L)
        assertThat(body.header()).contains("header")
        assertThat(body.headerHeight()).contains(0L)
        assertThat(body.pdfPassword()).contains("pdf_password")
        assertThat(body.pdfPasswordType()).contains(DocumentCreateParams.PdfPasswordType._1)
        assertThat(body.pdftext())
            .contains(
                DocumentCreateParams.Pdftext.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
        assertThat(body.redirect()).contains("https://")
        assertThat(body.reminders()).contains("")
        assertThat(body.returnSignerLinks()).contains(true)
        assertThat(body.signatureType()).contains(0L)
        assertThat(body.signersInOrder()).contains(true)
        assertThat(body.signertext())
            .contains(
                DocumentCreateParams.Signertext.builder()
                    .putAdditionalProperty("foo", JsonValue.from("string"))
                    .build()
            )
        assertThat(body.strictFields()).contains(true)
        assertThat(body.tag()).contains("tag")
        assertThat(body.tag1()).contains("tag1")
        assertThat(body.tag2()).contains("tag2")
        assertThat(body.template()).contains("https://example.com")
        assertThat(body.templatepdf()).contains("https://example.com")
        assertThat(body.text()).contains("text")
        assertThat(body.user()).contains("https://example.com")
    }

    @Test
    fun bodyWithoutOptionalFields() {
        val params =
            DocumentCreateParams.builder()
                .group("https://example.com")
                .name("x")
                .addSigner(
                    DocumentCreateParams.Signer.builder()
                        .email("dev@stainless.com")
                        .firstname("firstname")
                        .lastname("lastname")
                        .build()
                )
                .build()

        val body = params._body()

        assertThat(body.group()).isEqualTo("https://example.com")
        assertThat(body.name()).isEqualTo("x")
        assertThat(body.signers())
            .containsExactly(
                DocumentCreateParams.Signer.builder()
                    .email("dev@stainless.com")
                    .firstname("firstname")
                    .lastname("lastname")
                    .build()
            )
    }
}
